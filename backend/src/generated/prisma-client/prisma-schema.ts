// Code generated by Prisma (prisma@1.27.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateInspection {
  count: Int!
}

type AggregateSource {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Inspection {
  id: ID!
  source: Source!
  record: String!
  licensePlate: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InspectionConnection {
  pageInfo: PageInfo!
  edges: [InspectionEdge]!
  aggregate: AggregateInspection!
}

input InspectionCreateInput {
  source: SourceCreateOneInput!
  record: String!
  licensePlate: String!
  user: UserCreateOneWithoutInspectionsInput!
}

input InspectionCreateManyWithoutUserInput {
  create: [InspectionCreateWithoutUserInput!]
  connect: [InspectionWhereUniqueInput!]
}

input InspectionCreateWithoutUserInput {
  source: SourceCreateOneInput!
  record: String!
  licensePlate: String!
}

type InspectionEdge {
  node: Inspection!
  cursor: String!
}

enum InspectionOrderByInput {
  id_ASC
  id_DESC
  record_ASC
  record_DESC
  licensePlate_ASC
  licensePlate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InspectionPreviousValues {
  id: ID!
  record: String!
  licensePlate: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input InspectionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  record: String
  record_not: String
  record_in: [String!]
  record_not_in: [String!]
  record_lt: String
  record_lte: String
  record_gt: String
  record_gte: String
  record_contains: String
  record_not_contains: String
  record_starts_with: String
  record_not_starts_with: String
  record_ends_with: String
  record_not_ends_with: String
  licensePlate: String
  licensePlate_not: String
  licensePlate_in: [String!]
  licensePlate_not_in: [String!]
  licensePlate_lt: String
  licensePlate_lte: String
  licensePlate_gt: String
  licensePlate_gte: String
  licensePlate_contains: String
  licensePlate_not_contains: String
  licensePlate_starts_with: String
  licensePlate_not_starts_with: String
  licensePlate_ends_with: String
  licensePlate_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InspectionScalarWhereInput!]
  OR: [InspectionScalarWhereInput!]
  NOT: [InspectionScalarWhereInput!]
}

type InspectionSubscriptionPayload {
  mutation: MutationType!
  node: Inspection
  updatedFields: [String!]
  previousValues: InspectionPreviousValues
}

input InspectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InspectionWhereInput
  AND: [InspectionSubscriptionWhereInput!]
  OR: [InspectionSubscriptionWhereInput!]
  NOT: [InspectionSubscriptionWhereInput!]
}

input InspectionUpdateInput {
  source: SourceUpdateOneRequiredInput
  record: String
  licensePlate: String
  user: UserUpdateOneRequiredWithoutInspectionsInput
}

input InspectionUpdateManyDataInput {
  record: String
  licensePlate: String
}

input InspectionUpdateManyMutationInput {
  record: String
  licensePlate: String
}

input InspectionUpdateManyWithoutUserInput {
  create: [InspectionCreateWithoutUserInput!]
  delete: [InspectionWhereUniqueInput!]
  connect: [InspectionWhereUniqueInput!]
  set: [InspectionWhereUniqueInput!]
  disconnect: [InspectionWhereUniqueInput!]
  update: [InspectionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [InspectionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [InspectionScalarWhereInput!]
  updateMany: [InspectionUpdateManyWithWhereNestedInput!]
}

input InspectionUpdateManyWithWhereNestedInput {
  where: InspectionScalarWhereInput!
  data: InspectionUpdateManyDataInput!
}

input InspectionUpdateWithoutUserDataInput {
  source: SourceUpdateOneRequiredInput
  record: String
  licensePlate: String
}

input InspectionUpdateWithWhereUniqueWithoutUserInput {
  where: InspectionWhereUniqueInput!
  data: InspectionUpdateWithoutUserDataInput!
}

input InspectionUpsertWithWhereUniqueWithoutUserInput {
  where: InspectionWhereUniqueInput!
  update: InspectionUpdateWithoutUserDataInput!
  create: InspectionCreateWithoutUserInput!
}

input InspectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  source: SourceWhereInput
  record: String
  record_not: String
  record_in: [String!]
  record_not_in: [String!]
  record_lt: String
  record_lte: String
  record_gt: String
  record_gte: String
  record_contains: String
  record_not_contains: String
  record_starts_with: String
  record_not_starts_with: String
  record_ends_with: String
  record_not_ends_with: String
  licensePlate: String
  licensePlate_not: String
  licensePlate_in: [String!]
  licensePlate_not_in: [String!]
  licensePlate_lt: String
  licensePlate_lte: String
  licensePlate_gt: String
  licensePlate_gte: String
  licensePlate_contains: String
  licensePlate_not_contains: String
  licensePlate_starts_with: String
  licensePlate_not_starts_with: String
  licensePlate_ends_with: String
  licensePlate_not_ends_with: String
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InspectionWhereInput!]
  OR: [InspectionWhereInput!]
  NOT: [InspectionWhereInput!]
}

input InspectionWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createInspection(data: InspectionCreateInput!): Inspection!
  updateInspection(data: InspectionUpdateInput!, where: InspectionWhereUniqueInput!): Inspection
  updateManyInspections(data: InspectionUpdateManyMutationInput!, where: InspectionWhereInput): BatchPayload!
  upsertInspection(where: InspectionWhereUniqueInput!, create: InspectionCreateInput!, update: InspectionUpdateInput!): Inspection!
  deleteInspection(where: InspectionWhereUniqueInput!): Inspection
  deleteManyInspections(where: InspectionWhereInput): BatchPayload!
  createSource(data: SourceCreateInput!): Source!
  updateSource(data: SourceUpdateInput!, where: SourceWhereUniqueInput!): Source
  updateManySources(data: SourceUpdateManyMutationInput!, where: SourceWhereInput): BatchPayload!
  upsertSource(where: SourceWhereUniqueInput!, create: SourceCreateInput!, update: SourceUpdateInput!): Source!
  deleteSource(where: SourceWhereUniqueInput!): Source
  deleteManySources(where: SourceWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  DRIVER
  AGENT
}

type Query {
  inspection(where: InspectionWhereUniqueInput!): Inspection
  inspections(where: InspectionWhereInput, orderBy: InspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inspection]!
  inspectionsConnection(where: InspectionWhereInput, orderBy: InspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InspectionConnection!
  source(where: SourceWhereUniqueInput!): Source
  sources(where: SourceWhereInput, orderBy: SourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Source]!
  sourcesConnection(where: SourceWhereInput, orderBy: SourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SourceConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Source {
  id: ID!
  name: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SourceConnection {
  pageInfo: PageInfo!
  edges: [SourceEdge]!
  aggregate: AggregateSource!
}

input SourceCreateInput {
  name: String!
  user: UserCreateOneInput!
}

input SourceCreateOneInput {
  create: SourceCreateInput
  connect: SourceWhereUniqueInput
}

type SourceEdge {
  node: Source!
  cursor: String!
}

enum SourceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SourcePreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SourceSubscriptionPayload {
  mutation: MutationType!
  node: Source
  updatedFields: [String!]
  previousValues: SourcePreviousValues
}

input SourceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SourceWhereInput
  AND: [SourceSubscriptionWhereInput!]
  OR: [SourceSubscriptionWhereInput!]
  NOT: [SourceSubscriptionWhereInput!]
}

input SourceUpdateDataInput {
  name: String
  user: UserUpdateOneRequiredInput
}

input SourceUpdateInput {
  name: String
  user: UserUpdateOneRequiredInput
}

input SourceUpdateManyMutationInput {
  name: String
}

input SourceUpdateOneRequiredInput {
  create: SourceCreateInput
  update: SourceUpdateDataInput
  upsert: SourceUpsertNestedInput
  connect: SourceWhereUniqueInput
}

input SourceUpsertNestedInput {
  update: SourceUpdateDataInput!
  create: SourceCreateInput!
}

input SourceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SourceWhereInput!]
  OR: [SourceWhereInput!]
  NOT: [SourceWhereInput!]
}

input SourceWhereUniqueInput {
  id: ID
}

type Subscription {
  inspection(where: InspectionSubscriptionWhereInput): InspectionSubscriptionPayload
  source(where: SourceSubscriptionWhereInput): SourceSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  cc: Int!
  email: String!
  nickname: String!
  password: String!
  name: String
  resetToken: String
  resetTokenExpiry: Float
  inspections(where: InspectionWhereInput, orderBy: InspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inspection!]
  permissions: [Permission!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  cc: Int!
  email: String!
  nickname: String!
  password: String!
  name: String
  resetToken: String
  resetTokenExpiry: Float
  inspections: InspectionCreateManyWithoutUserInput
  permissions: UserCreatepermissionsInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInspectionsInput {
  create: UserCreateWithoutInspectionsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutInspectionsInput {
  cc: Int!
  email: String!
  nickname: String!
  password: String!
  name: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  cc_ASC
  cc_DESC
  email_ASC
  email_DESC
  nickname_ASC
  nickname_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  cc: Int!
  email: String!
  nickname: String!
  password: String!
  name: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  cc: Int
  email: String
  nickname: String
  password: String
  name: String
  resetToken: String
  resetTokenExpiry: Float
  inspections: InspectionUpdateManyWithoutUserInput
  permissions: UserUpdatepermissionsInput
}

input UserUpdateInput {
  cc: Int
  email: String
  nickname: String
  password: String
  name: String
  resetToken: String
  resetTokenExpiry: Float
  inspections: InspectionUpdateManyWithoutUserInput
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  cc: Int
  email: String
  nickname: String
  password: String
  name: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutInspectionsInput {
  create: UserCreateWithoutInspectionsInput
  update: UserUpdateWithoutInspectionsDataInput
  upsert: UserUpsertWithoutInspectionsInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutInspectionsDataInput {
  cc: Int
  email: String
  nickname: String
  password: String
  name: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutInspectionsInput {
  update: UserUpdateWithoutInspectionsDataInput!
  create: UserCreateWithoutInspectionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cc: Int
  cc_not: Int
  cc_in: [Int!]
  cc_not_in: [Int!]
  cc_lt: Int
  cc_lte: Int
  cc_gt: Int
  cc_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  inspections_every: InspectionWhereInput
  inspections_some: InspectionWhereInput
  inspections_none: InspectionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  cc: Int
  email: String
  nickname: String
}
`
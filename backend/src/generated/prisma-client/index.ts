// Code generated by Prisma (prisma@1.27.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  inspection: (where?: InspectionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  inspection: (where: InspectionWhereUniqueInput) => InspectionPromise;
  inspections: (
    args?: {
      where?: InspectionWhereInput;
      orderBy?: InspectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Inspection>;
  inspectionsConnection: (
    args?: {
      where?: InspectionWhereInput;
      orderBy?: InspectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InspectionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createInspection: (data: InspectionCreateInput) => InspectionPromise;
  updateInspection: (
    args: { data: InspectionUpdateInput; where: InspectionWhereUniqueInput }
  ) => InspectionPromise;
  updateManyInspections: (
    args: {
      data: InspectionUpdateManyMutationInput;
      where?: InspectionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInspection: (
    args: {
      where: InspectionWhereUniqueInput;
      create: InspectionCreateInput;
      update: InspectionUpdateInput;
    }
  ) => InspectionPromise;
  deleteInspection: (where: InspectionWhereUniqueInput) => InspectionPromise;
  deleteManyInspections: (where?: InspectionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  inspection: (
    where?: InspectionSubscriptionWhereInput
  ) => InspectionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type InspectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "source_ASC"
  | "source_DESC"
  | "record_ASC"
  | "record_DESC"
  | "licensePlate_ASC"
  | "licensePlate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission = "ADMIN" | "DRIVER" | "AGENT";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cc_ASC"
  | "cc_DESC"
  | "email_ASC"
  | "email_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type InspectionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface InspectionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  record?: String;
  record_not?: String;
  record_in?: String[] | String;
  record_not_in?: String[] | String;
  record_lt?: String;
  record_lte?: String;
  record_gt?: String;
  record_gte?: String;
  record_contains?: String;
  record_not_contains?: String;
  record_starts_with?: String;
  record_not_starts_with?: String;
  record_ends_with?: String;
  record_not_ends_with?: String;
  licensePlate?: String;
  licensePlate_not?: String;
  licensePlate_in?: String[] | String;
  licensePlate_not_in?: String[] | String;
  licensePlate_lt?: String;
  licensePlate_lte?: String;
  licensePlate_gt?: String;
  licensePlate_gte?: String;
  licensePlate_contains?: String;
  licensePlate_not_contains?: String;
  licensePlate_starts_with?: String;
  licensePlate_not_starts_with?: String;
  licensePlate_ends_with?: String;
  licensePlate_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: InspectionWhereInput[] | InspectionWhereInput;
  OR?: InspectionWhereInput[] | InspectionWhereInput;
  NOT?: InspectionWhereInput[] | InspectionWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  cc?: Int;
  cc_not?: Int;
  cc_in?: Int[] | Int;
  cc_not_in?: Int[] | Int;
  cc_lt?: Int;
  cc_lte?: Int;
  cc_gt?: Int;
  cc_gte?: Int;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  inspections_every?: InspectionWhereInput;
  inspections_some?: InspectionWhereInput;
  inspections_none?: InspectionWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  cc?: Int;
  email?: String;
  nickname?: String;
}>;

export interface InspectionCreateInput {
  source: String;
  record: String;
  licensePlate: String;
  user: UserCreateOneWithoutInspectionsInput;
}

export interface UserCreateOneWithoutInspectionsInput {
  create?: UserCreateWithoutInspectionsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutInspectionsInput {
  cc: Int;
  email: String;
  nickname: String;
  password: String;
  name?: String;
  permissions?: UserCreatepermissionsInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface InspectionUpdateInput {
  source?: String;
  record?: String;
  licensePlate?: String;
  user?: UserUpdateOneRequiredWithoutInspectionsInput;
}

export interface UserUpdateOneRequiredWithoutInspectionsInput {
  create?: UserCreateWithoutInspectionsInput;
  update?: UserUpdateWithoutInspectionsDataInput;
  upsert?: UserUpsertWithoutInspectionsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutInspectionsDataInput {
  cc?: Int;
  email?: String;
  nickname?: String;
  password?: String;
  name?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface UserUpsertWithoutInspectionsInput {
  update: UserUpdateWithoutInspectionsDataInput;
  create: UserCreateWithoutInspectionsInput;
}

export interface InspectionUpdateManyMutationInput {
  source?: String;
  record?: String;
  licensePlate?: String;
}

export interface UserCreateInput {
  cc: Int;
  email: String;
  nickname: String;
  password: String;
  name?: String;
  inspections?: InspectionCreateManyWithoutUserInput;
  permissions?: UserCreatepermissionsInput;
}

export interface InspectionCreateManyWithoutUserInput {
  create?:
    | InspectionCreateWithoutUserInput[]
    | InspectionCreateWithoutUserInput;
  connect?: InspectionWhereUniqueInput[] | InspectionWhereUniqueInput;
}

export interface InspectionCreateWithoutUserInput {
  source: String;
  record: String;
  licensePlate: String;
}

export interface UserUpdateInput {
  cc?: Int;
  email?: String;
  nickname?: String;
  password?: String;
  name?: String;
  inspections?: InspectionUpdateManyWithoutUserInput;
  permissions?: UserUpdatepermissionsInput;
}

export interface InspectionUpdateManyWithoutUserInput {
  create?:
    | InspectionCreateWithoutUserInput[]
    | InspectionCreateWithoutUserInput;
  delete?: InspectionWhereUniqueInput[] | InspectionWhereUniqueInput;
  connect?: InspectionWhereUniqueInput[] | InspectionWhereUniqueInput;
  set?: InspectionWhereUniqueInput[] | InspectionWhereUniqueInput;
  disconnect?: InspectionWhereUniqueInput[] | InspectionWhereUniqueInput;
  update?:
    | InspectionUpdateWithWhereUniqueWithoutUserInput[]
    | InspectionUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | InspectionUpsertWithWhereUniqueWithoutUserInput[]
    | InspectionUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: InspectionScalarWhereInput[] | InspectionScalarWhereInput;
  updateMany?:
    | InspectionUpdateManyWithWhereNestedInput[]
    | InspectionUpdateManyWithWhereNestedInput;
}

export interface InspectionUpdateWithWhereUniqueWithoutUserInput {
  where: InspectionWhereUniqueInput;
  data: InspectionUpdateWithoutUserDataInput;
}

export interface InspectionUpdateWithoutUserDataInput {
  source?: String;
  record?: String;
  licensePlate?: String;
}

export interface InspectionUpsertWithWhereUniqueWithoutUserInput {
  where: InspectionWhereUniqueInput;
  update: InspectionUpdateWithoutUserDataInput;
  create: InspectionCreateWithoutUserInput;
}

export interface InspectionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  record?: String;
  record_not?: String;
  record_in?: String[] | String;
  record_not_in?: String[] | String;
  record_lt?: String;
  record_lte?: String;
  record_gt?: String;
  record_gte?: String;
  record_contains?: String;
  record_not_contains?: String;
  record_starts_with?: String;
  record_not_starts_with?: String;
  record_ends_with?: String;
  record_not_ends_with?: String;
  licensePlate?: String;
  licensePlate_not?: String;
  licensePlate_in?: String[] | String;
  licensePlate_not_in?: String[] | String;
  licensePlate_lt?: String;
  licensePlate_lte?: String;
  licensePlate_gt?: String;
  licensePlate_gte?: String;
  licensePlate_contains?: String;
  licensePlate_not_contains?: String;
  licensePlate_starts_with?: String;
  licensePlate_not_starts_with?: String;
  licensePlate_ends_with?: String;
  licensePlate_not_ends_with?: String;
  AND?: InspectionScalarWhereInput[] | InspectionScalarWhereInput;
  OR?: InspectionScalarWhereInput[] | InspectionScalarWhereInput;
  NOT?: InspectionScalarWhereInput[] | InspectionScalarWhereInput;
}

export interface InspectionUpdateManyWithWhereNestedInput {
  where: InspectionScalarWhereInput;
  data: InspectionUpdateManyDataInput;
}

export interface InspectionUpdateManyDataInput {
  source?: String;
  record?: String;
  licensePlate?: String;
}

export interface UserUpdateManyMutationInput {
  cc?: Int;
  email?: String;
  nickname?: String;
  password?: String;
  name?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface InspectionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InspectionWhereInput;
  AND?: InspectionSubscriptionWhereInput[] | InspectionSubscriptionWhereInput;
  OR?: InspectionSubscriptionWhereInput[] | InspectionSubscriptionWhereInput;
  NOT?: InspectionSubscriptionWhereInput[] | InspectionSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Inspection {
  id: ID_Output;
  source: String;
  record: String;
  licensePlate: String;
}

export interface InspectionPromise extends Promise<Inspection>, Fragmentable {
  id: () => Promise<ID_Output>;
  source: () => Promise<String>;
  record: () => Promise<String>;
  licensePlate: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface InspectionSubscription
  extends Promise<AsyncIterator<Inspection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  source: () => Promise<AsyncIterator<String>>;
  record: () => Promise<AsyncIterator<String>>;
  licensePlate: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  cc: Int;
  email: String;
  nickname: String;
  password: String;
  name?: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  cc: () => Promise<Int>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  inspections: <T = FragmentableArray<Inspection>>(
    args?: {
      where?: InspectionWhereInput;
      orderBy?: InspectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  permissions: () => Promise<Permission[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cc: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  inspections: <T = Promise<AsyncIterator<InspectionSubscription>>>(
    args?: {
      where?: InspectionWhereInput;
      orderBy?: InspectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface InspectionConnection {
  pageInfo: PageInfo;
  edges: InspectionEdge[];
}

export interface InspectionConnectionPromise
  extends Promise<InspectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InspectionEdge>>() => T;
  aggregate: <T = AggregateInspectionPromise>() => T;
}

export interface InspectionConnectionSubscription
  extends Promise<AsyncIterator<InspectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InspectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInspectionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface InspectionEdge {
  node: Inspection;
  cursor: String;
}

export interface InspectionEdgePromise
  extends Promise<InspectionEdge>,
    Fragmentable {
  node: <T = InspectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InspectionEdgeSubscription
  extends Promise<AsyncIterator<InspectionEdge>>,
    Fragmentable {
  node: <T = InspectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInspection {
  count: Int;
}

export interface AggregateInspectionPromise
  extends Promise<AggregateInspection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInspectionSubscription
  extends Promise<AsyncIterator<AggregateInspection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface InspectionSubscriptionPayload {
  mutation: MutationType;
  node: Inspection;
  updatedFields: String[];
  previousValues: InspectionPreviousValues;
}

export interface InspectionSubscriptionPayloadPromise
  extends Promise<InspectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InspectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InspectionPreviousValuesPromise>() => T;
}

export interface InspectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InspectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InspectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InspectionPreviousValuesSubscription>() => T;
}

export interface InspectionPreviousValues {
  id: ID_Output;
  source: String;
  record: String;
  licensePlate: String;
}

export interface InspectionPreviousValuesPromise
  extends Promise<InspectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  source: () => Promise<String>;
  record: () => Promise<String>;
  licensePlate: () => Promise<String>;
}

export interface InspectionPreviousValuesSubscription
  extends Promise<AsyncIterator<InspectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  source: () => Promise<AsyncIterator<String>>;
  record: () => Promise<AsyncIterator<String>>;
  licensePlate: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  cc: Int;
  email: String;
  nickname: String;
  password: String;
  name?: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cc: () => Promise<Int>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cc: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Inspection",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/julian-alvarez/inspector/dev`
});
export const prisma = new Prisma();

// Code generated by Prisma (prisma@1.27.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  pictures: (where?: PicturesWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  setCard: (where?: SetCardWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  pictures: (where: PicturesWhereUniqueInput) => PicturesPromise;
  pictureses: (
    args?: {
      where?: PicturesWhereInput;
      orderBy?: PicturesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Pictures>;
  picturesesConnection: (
    args?: {
      where?: PicturesWhereInput;
      orderBy?: PicturesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PicturesConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  setCard: (where: SetCardWhereUniqueInput) => SetCardPromise;
  setCards: (
    args?: {
      where?: SetCardWhereInput;
      orderBy?: SetCardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SetCard>;
  setCardsConnection: (
    args?: {
      where?: SetCardWhereInput;
      orderBy?: SetCardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SetCardConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPictures: (data: PicturesCreateInput) => PicturesPromise;
  updatePictures: (
    args: { data: PicturesUpdateInput; where: PicturesWhereUniqueInput }
  ) => PicturesPromise;
  updateManyPictureses: (
    args: { data: PicturesUpdateManyMutationInput; where?: PicturesWhereInput }
  ) => BatchPayloadPromise;
  upsertPictures: (
    args: {
      where: PicturesWhereUniqueInput;
      create: PicturesCreateInput;
      update: PicturesUpdateInput;
    }
  ) => PicturesPromise;
  deletePictures: (where: PicturesWhereUniqueInput) => PicturesPromise;
  deleteManyPictureses: (where?: PicturesWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createSetCard: (data: SetCardCreateInput) => SetCardPromise;
  updateSetCard: (
    args: { data: SetCardUpdateInput; where: SetCardWhereUniqueInput }
  ) => SetCardPromise;
  updateManySetCards: (
    args: { data: SetCardUpdateManyMutationInput; where?: SetCardWhereInput }
  ) => BatchPayloadPromise;
  upsertSetCard: (
    args: {
      where: SetCardWhereUniqueInput;
      create: SetCardCreateInput;
      update: SetCardUpdateInput;
    }
  ) => SetCardPromise;
  deleteSetCard: (where: SetCardWhereUniqueInput) => SetCardPromise;
  deleteManySetCards: (where?: SetCardWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  pictures: (
    where?: PicturesSubscriptionWhereInput
  ) => PicturesSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  setCard: (
    where?: SetCardSubscriptionWhereInput
  ) => SetCardSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PicturesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "url_ASC"
  | "url_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type Permission = "ADMIN" | "USER" | "ESCORT" | "AGENT";

export type SetCardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "aliasName_ASC"
  | "aliasName_DESC"
  | "age_ASC"
  | "age_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PicturesWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PicturesWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  setCard?: SetCardWhereInput;
  AND?: PicturesWhereInput[] | PicturesWhereInput;
  OR?: PicturesWhereInput[] | PicturesWhereInput;
  NOT?: PicturesWhereInput[] | PicturesWhereInput;
}

export interface SetCardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  aliasName?: String;
  aliasName_not?: String;
  aliasName_in?: String[] | String;
  aliasName_not_in?: String[] | String;
  aliasName_lt?: String;
  aliasName_lte?: String;
  aliasName_gt?: String;
  aliasName_gte?: String;
  aliasName_contains?: String;
  aliasName_not_contains?: String;
  aliasName_starts_with?: String;
  aliasName_not_starts_with?: String;
  aliasName_ends_with?: String;
  aliasName_not_ends_with?: String;
  pictures_every?: PicturesWhereInput;
  pictures_some?: PicturesWhereInput;
  pictures_none?: PicturesWhereInput;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  escort?: UserWhereInput;
  AND?: SetCardWhereInput[] | SetCardWhereInput;
  OR?: SetCardWhereInput[] | SetCardWhereInput;
  NOT?: SetCardWhereInput[] | SetCardWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  profile?: SetCardWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type SetCardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  aliasName?: String;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  nickname?: String;
}>;

export interface PicturesCreateInput {
  url: String;
  setCard: SetCardCreateOneWithoutPicturesInput;
}

export interface SetCardCreateOneWithoutPicturesInput {
  create?: SetCardCreateWithoutPicturesInput;
  connect?: SetCardWhereUniqueInput;
}

export interface SetCardCreateWithoutPicturesInput {
  aliasName: String;
  age: Int;
  escort: UserCreateOneWithoutProfileInput;
}

export interface UserCreateOneWithoutProfileInput {
  create?: UserCreateWithoutProfileInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutProfileInput {
  email: String;
  nickname: String;
  password: String;
  name?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  permissions?: UserCreatepermissionsInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutAuthorInput {
  published?: Boolean;
  title: String;
  content?: String;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface PicturesUpdateInput {
  url?: String;
  setCard?: SetCardUpdateOneRequiredWithoutPicturesInput;
}

export interface SetCardUpdateOneRequiredWithoutPicturesInput {
  create?: SetCardCreateWithoutPicturesInput;
  update?: SetCardUpdateWithoutPicturesDataInput;
  upsert?: SetCardUpsertWithoutPicturesInput;
  connect?: SetCardWhereUniqueInput;
}

export interface SetCardUpdateWithoutPicturesDataInput {
  aliasName?: String;
  age?: Int;
  escort?: UserUpdateOneRequiredWithoutProfileInput;
}

export interface UserUpdateOneRequiredWithoutProfileInput {
  create?: UserCreateWithoutProfileInput;
  update?: UserUpdateWithoutProfileDataInput;
  upsert?: UserUpsertWithoutProfileInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutProfileDataInput {
  email?: String;
  nickname?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  permissions?: UserUpdatepermissionsInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput;
  create: UserCreateWithoutProfileInput;
}

export interface SetCardUpsertWithoutPicturesInput {
  update: SetCardUpdateWithoutPicturesDataInput;
  create: SetCardCreateWithoutPicturesInput;
}

export interface PicturesUpdateManyMutationInput {
  url?: String;
}

export interface PostCreateInput {
  published?: Boolean;
  title: String;
  content?: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  nickname: String;
  password: String;
  name?: String;
  permissions?: UserCreatepermissionsInput;
  profile?: SetCardCreateOneWithoutEscortInput;
}

export interface SetCardCreateOneWithoutEscortInput {
  create?: SetCardCreateWithoutEscortInput;
  connect?: SetCardWhereUniqueInput;
}

export interface SetCardCreateWithoutEscortInput {
  aliasName: String;
  pictures?: PicturesCreateManyWithoutSetCardInput;
  age: Int;
}

export interface PicturesCreateManyWithoutSetCardInput {
  create?:
    | PicturesCreateWithoutSetCardInput[]
    | PicturesCreateWithoutSetCardInput;
  connect?: PicturesWhereUniqueInput[] | PicturesWhereUniqueInput;
}

export interface PicturesCreateWithoutSetCardInput {
  url: String;
}

export interface PostUpdateInput {
  published?: Boolean;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  nickname?: String;
  password?: String;
  name?: String;
  permissions?: UserUpdatepermissionsInput;
  profile?: SetCardUpdateOneWithoutEscortInput;
}

export interface SetCardUpdateOneWithoutEscortInput {
  create?: SetCardCreateWithoutEscortInput;
  update?: SetCardUpdateWithoutEscortDataInput;
  upsert?: SetCardUpsertWithoutEscortInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SetCardWhereUniqueInput;
}

export interface SetCardUpdateWithoutEscortDataInput {
  aliasName?: String;
  pictures?: PicturesUpdateManyWithoutSetCardInput;
  age?: Int;
}

export interface PicturesUpdateManyWithoutSetCardInput {
  create?:
    | PicturesCreateWithoutSetCardInput[]
    | PicturesCreateWithoutSetCardInput;
  delete?: PicturesWhereUniqueInput[] | PicturesWhereUniqueInput;
  connect?: PicturesWhereUniqueInput[] | PicturesWhereUniqueInput;
  set?: PicturesWhereUniqueInput[] | PicturesWhereUniqueInput;
  disconnect?: PicturesWhereUniqueInput[] | PicturesWhereUniqueInput;
  update?:
    | PicturesUpdateWithWhereUniqueWithoutSetCardInput[]
    | PicturesUpdateWithWhereUniqueWithoutSetCardInput;
  upsert?:
    | PicturesUpsertWithWhereUniqueWithoutSetCardInput[]
    | PicturesUpsertWithWhereUniqueWithoutSetCardInput;
  deleteMany?: PicturesScalarWhereInput[] | PicturesScalarWhereInput;
  updateMany?:
    | PicturesUpdateManyWithWhereNestedInput[]
    | PicturesUpdateManyWithWhereNestedInput;
}

export interface PicturesUpdateWithWhereUniqueWithoutSetCardInput {
  where: PicturesWhereUniqueInput;
  data: PicturesUpdateWithoutSetCardDataInput;
}

export interface PicturesUpdateWithoutSetCardDataInput {
  url?: String;
}

export interface PicturesUpsertWithWhereUniqueWithoutSetCardInput {
  where: PicturesWhereUniqueInput;
  update: PicturesUpdateWithoutSetCardDataInput;
  create: PicturesCreateWithoutSetCardInput;
}

export interface PicturesScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: PicturesScalarWhereInput[] | PicturesScalarWhereInput;
  OR?: PicturesScalarWhereInput[] | PicturesScalarWhereInput;
  NOT?: PicturesScalarWhereInput[] | PicturesScalarWhereInput;
}

export interface PicturesUpdateManyWithWhereNestedInput {
  where: PicturesScalarWhereInput;
  data: PicturesUpdateManyDataInput;
}

export interface PicturesUpdateManyDataInput {
  url?: String;
}

export interface SetCardUpsertWithoutEscortInput {
  update: SetCardUpdateWithoutEscortDataInput;
  create: SetCardCreateWithoutEscortInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface SetCardCreateInput {
  aliasName: String;
  pictures?: PicturesCreateManyWithoutSetCardInput;
  age: Int;
  escort: UserCreateOneWithoutProfileInput;
}

export interface SetCardUpdateInput {
  aliasName?: String;
  pictures?: PicturesUpdateManyWithoutSetCardInput;
  age?: Int;
  escort?: UserUpdateOneRequiredWithoutProfileInput;
}

export interface SetCardUpdateManyMutationInput {
  aliasName?: String;
  age?: Int;
}

export interface UserCreateInput {
  email: String;
  nickname: String;
  password: String;
  name?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  permissions?: UserCreatepermissionsInput;
  profile?: SetCardCreateOneWithoutEscortInput;
}

export interface UserUpdateInput {
  email?: String;
  nickname?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  permissions?: UserUpdatepermissionsInput;
  profile?: SetCardUpdateOneWithoutEscortInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  nickname?: String;
  password?: String;
  name?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface PicturesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PicturesWhereInput;
  AND?: PicturesSubscriptionWhereInput[] | PicturesSubscriptionWhereInput;
  OR?: PicturesSubscriptionWhereInput[] | PicturesSubscriptionWhereInput;
  NOT?: PicturesSubscriptionWhereInput[] | PicturesSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface SetCardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SetCardWhereInput;
  AND?: SetCardSubscriptionWhereInput[] | SetCardSubscriptionWhereInput;
  OR?: SetCardSubscriptionWhereInput[] | SetCardSubscriptionWhereInput;
  NOT?: SetCardSubscriptionWhereInput[] | SetCardSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Pictures {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  url: String;
}

export interface PicturesPromise extends Promise<Pictures>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
  setCard: <T = SetCardPromise>() => T;
}

export interface PicturesSubscription
  extends Promise<AsyncIterator<Pictures>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
  setCard: <T = SetCardSubscription>() => T;
}

export interface SetCard {
  id: ID_Output;
  aliasName: String;
  age: Int;
}

export interface SetCardPromise extends Promise<SetCard>, Fragmentable {
  id: () => Promise<ID_Output>;
  aliasName: () => Promise<String>;
  pictures: <T = FragmentableArray<Pictures>>(
    args?: {
      where?: PicturesWhereInput;
      orderBy?: PicturesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  age: () => Promise<Int>;
  escort: <T = UserPromise>() => T;
}

export interface SetCardSubscription
  extends Promise<AsyncIterator<SetCard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  aliasName: () => Promise<AsyncIterator<String>>;
  pictures: <T = Promise<AsyncIterator<PicturesSubscription>>>(
    args?: {
      where?: PicturesWhereInput;
      orderBy?: PicturesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  age: () => Promise<AsyncIterator<Int>>;
  escort: <T = UserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  nickname: String;
  password: String;
  name?: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  permissions: () => Promise<Permission[]>;
  profile: <T = SetCardPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  profile: <T = SetCardSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content?: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface PicturesConnection {
  pageInfo: PageInfo;
  edges: PicturesEdge[];
}

export interface PicturesConnectionPromise
  extends Promise<PicturesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PicturesEdge>>() => T;
  aggregate: <T = AggregatePicturesPromise>() => T;
}

export interface PicturesConnectionSubscription
  extends Promise<AsyncIterator<PicturesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PicturesEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePicturesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PicturesEdge {
  node: Pictures;
  cursor: String;
}

export interface PicturesEdgePromise
  extends Promise<PicturesEdge>,
    Fragmentable {
  node: <T = PicturesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PicturesEdgeSubscription
  extends Promise<AsyncIterator<PicturesEdge>>,
    Fragmentable {
  node: <T = PicturesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePictures {
  count: Int;
}

export interface AggregatePicturesPromise
  extends Promise<AggregatePictures>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePicturesSubscription
  extends Promise<AsyncIterator<AggregatePictures>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SetCardConnection {
  pageInfo: PageInfo;
  edges: SetCardEdge[];
}

export interface SetCardConnectionPromise
  extends Promise<SetCardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SetCardEdge>>() => T;
  aggregate: <T = AggregateSetCardPromise>() => T;
}

export interface SetCardConnectionSubscription
  extends Promise<AsyncIterator<SetCardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SetCardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSetCardSubscription>() => T;
}

export interface SetCardEdge {
  node: SetCard;
  cursor: String;
}

export interface SetCardEdgePromise extends Promise<SetCardEdge>, Fragmentable {
  node: <T = SetCardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SetCardEdgeSubscription
  extends Promise<AsyncIterator<SetCardEdge>>,
    Fragmentable {
  node: <T = SetCardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSetCard {
  count: Int;
}

export interface AggregateSetCardPromise
  extends Promise<AggregateSetCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSetCardSubscription
  extends Promise<AsyncIterator<AggregateSetCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PicturesSubscriptionPayload {
  mutation: MutationType;
  node: Pictures;
  updatedFields: String[];
  previousValues: PicturesPreviousValues;
}

export interface PicturesSubscriptionPayloadPromise
  extends Promise<PicturesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PicturesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PicturesPreviousValuesPromise>() => T;
}

export interface PicturesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PicturesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PicturesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PicturesPreviousValuesSubscription>() => T;
}

export interface PicturesPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  url: String;
}

export interface PicturesPreviousValuesPromise
  extends Promise<PicturesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
}

export interface PicturesPreviousValuesSubscription
  extends Promise<AsyncIterator<PicturesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content?: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface SetCardSubscriptionPayload {
  mutation: MutationType;
  node: SetCard;
  updatedFields: String[];
  previousValues: SetCardPreviousValues;
}

export interface SetCardSubscriptionPayloadPromise
  extends Promise<SetCardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SetCardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SetCardPreviousValuesPromise>() => T;
}

export interface SetCardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SetCardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SetCardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SetCardPreviousValuesSubscription>() => T;
}

export interface SetCardPreviousValues {
  id: ID_Output;
  aliasName: String;
  age: Int;
}

export interface SetCardPreviousValuesPromise
  extends Promise<SetCardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  aliasName: () => Promise<String>;
  age: () => Promise<Int>;
}

export interface SetCardPreviousValuesSubscription
  extends Promise<AsyncIterator<SetCardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  aliasName: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  nickname: String;
  password: String;
  name?: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "SetCard",
    embedded: false
  },
  {
    name: "Pictures",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/julian-alvarez/nexus-auth/dev`
});
export const prisma = new Prisma();

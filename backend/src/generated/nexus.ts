/**
 * This file was automatically generated by Nexus 0.10.0
 * Do not make changes to this file directly
 */

import * as types from "../types"


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Permission: "ADMIN" | "AGENT" | "DRIVER"
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    message?: string | null; // String
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Inspection: { // root type
    createdAt: any; // DateTime!
    id: string; // ID!
    licensePlate: string; // String!
    record: string; // String!
    updatedAt: any; // DateTime!
  }
  Mutation: {};
  Query: {};
  Source: { // root type
    createdAt: any; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
  User: { // root type
    cc: number; // Int!
    email: string; // String!
    id: string; // ID!
    name?: string | null; // String
    nickname: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  Permission: NexusGenEnums['Permission'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    message: string | null; // String
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Inspection: { // field return type
    createdAt: any; // DateTime!
    id: string; // ID!
    licensePlate: string; // String!
    record: string; // String!
    source: NexusGenRootTypes['Source']; // Source!
    updatedAt: any; // DateTime!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signout: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
  }
  Source: { // field return type
    createdAt: any; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt: any; // DateTime!
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    cc: number; // Int!
    email: string; // String!
    id: string; // ID!
    inspections: NexusGenRootTypes['Inspection'][] | null; // [Inspection!]
    name: string | null; // String
    nickname: string; // String!
    permissions: NexusGenEnums['Permission'][]; // [Permission!]!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      email?: string | null; // String
      password?: string | null; // String
    }
    signup: { // args
      cc?: number | null; // Int
      email?: string | null; // String
      name?: string | null; // String
      nickname?: string | null; // String
      password?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Inspection" | "Mutation" | "Query" | "Source" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "Permission";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: types.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}
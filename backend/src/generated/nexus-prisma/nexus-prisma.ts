/**
 * This file was automatically generated by nexus-prisma@0.3.4
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Inspection: InspectionObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      InspectionConnection: InspectionConnectionObject
      InspectionEdge: InspectionEdgeObject
      AggregateInspection: AggregateInspectionObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      InspectionSubscriptionPayload: InspectionSubscriptionPayloadObject
      InspectionPreviousValues: InspectionPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Inspection: InspectionFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      InspectionConnection: InspectionConnectionFieldDetails
      InspectionEdge: InspectionEdgeFieldDetails
      AggregateInspection: AggregateInspectionFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      InspectionSubscriptionPayload: InspectionSubscriptionPayloadFieldDetails
      InspectionPreviousValues: InspectionPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      InspectionWhereInput: InspectionWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      InspectionWhereUniqueInput: InspectionWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      InspectionCreateManyWithoutUserInput: InspectionCreateManyWithoutUserInputInputObject
      InspectionCreateWithoutUserInput: InspectionCreateWithoutUserInputInputObject
      UserCreatepermissionsInput: UserCreatepermissionsInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      InspectionUpdateManyWithoutUserInput: InspectionUpdateManyWithoutUserInputInputObject
      InspectionUpdateWithWhereUniqueWithoutUserInput: InspectionUpdateWithWhereUniqueWithoutUserInputInputObject
      InspectionUpdateWithoutUserDataInput: InspectionUpdateWithoutUserDataInputInputObject
      InspectionUpsertWithWhereUniqueWithoutUserInput: InspectionUpsertWithWhereUniqueWithoutUserInputInputObject
      InspectionScalarWhereInput: InspectionScalarWhereInputInputObject
      InspectionUpdateManyWithWhereNestedInput: InspectionUpdateManyWithWhereNestedInputInputObject
      InspectionUpdateManyDataInput: InspectionUpdateManyDataInputInputObject
      UserUpdatepermissionsInput: UserUpdatepermissionsInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      InspectionCreateInput: InspectionCreateInputInputObject
      UserCreateOneWithoutInspectionsInput: UserCreateOneWithoutInspectionsInputInputObject
      UserCreateWithoutInspectionsInput: UserCreateWithoutInspectionsInputInputObject
      InspectionUpdateInput: InspectionUpdateInputInputObject
      UserUpdateOneRequiredWithoutInspectionsInput: UserUpdateOneRequiredWithoutInspectionsInputInputObject
      UserUpdateWithoutInspectionsDataInput: UserUpdateWithoutInspectionsDataInputInputObject
      UserUpsertWithoutInspectionsInput: UserUpsertWithoutInspectionsInputInputObject
      InspectionUpdateManyMutationInput: InspectionUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      InspectionSubscriptionWhereInput: InspectionSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    InspectionOrderByInput: InspectionOrderByInputValues,
    Permission: PermissionValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'inspection', args?: QueryInspectionArgs[] | false, alias?: string  } 
  | { name: 'inspections', args?: QueryInspectionsArgs[] | false, alias?: string  } 
  | { name: 'inspectionsConnection', args?: QueryInspectionsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'inspection'
  | 'inspections'
  | 'inspectionsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInspectionArgs =
  | 'where'
type QueryInspectionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInspectionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  inspection: {
    type: 'Inspection'
    args: Record<QueryInspectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InspectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection | null> | prisma.Inspection | null
  }
  inspections: {
    type: 'Inspection'
    args: Record<QueryInspectionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InspectionWhereInput | null, orderBy?: prisma.InspectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection[]> | prisma.Inspection[]
  }
  inspectionsConnection: {
    type: 'InspectionConnection'
    args: Record<QueryInspectionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InspectionWhereInput | null, orderBy?: prisma.InspectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InspectionConnection> | prisma.InspectionConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'cc', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'inspections', args?: UserInspectionsArgs[] | false, alias?: string  } 
  | { name: 'permissions', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'cc'
  | 'email'
  | 'password'
  | 'name'
  | 'inspections'
  | 'permissions'


type UserInspectionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cc: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  inspections: {
    type: 'Inspection'
    args: Record<UserInspectionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: InspectionWhereInput | null, orderBy?: prisma.InspectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection[]> | prisma.Inspection[]
  }
  permissions: {
    type: 'Permission'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Permission[]> | prisma.Permission[]
  }
}
  

// Types for Inspection

type InspectionObject =
  | InspectionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'source', args?: [] | false, alias?: string  } 
  | { name: 'record', args?: [] | false, alias?: string  } 
  | { name: 'licensePlate', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 

type InspectionFields =
  | 'id'
  | 'source'
  | 'record'
  | 'licensePlate'
  | 'user'



  

export interface InspectionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  source: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  record: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  licensePlate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Inspection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InspectionConnection

type InspectionConnectionObject =
  | InspectionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InspectionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InspectionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InspectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InspectionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InspectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InspectionEdge[]> | prisma.InspectionEdge[]
  }
  aggregate: {
    type: 'AggregateInspection'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InspectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInspection> | prisma.AggregateInspection
  }
}
  

// Types for InspectionEdge

type InspectionEdgeObject =
  | InspectionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InspectionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InspectionEdgeFieldDetails {
  node: {
    type: 'Inspection'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InspectionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection> | prisma.Inspection
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInspection

type AggregateInspectionObject =
  | AggregateInspectionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInspectionFields =
  | 'count'



  

export interface AggregateInspectionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createInspection', args?: MutationCreateInspectionArgs[] | false, alias?: string  } 
  | { name: 'updateInspection', args?: MutationUpdateInspectionArgs[] | false, alias?: string  } 
  | { name: 'updateManyInspections', args?: MutationUpdateManyInspectionsArgs[] | false, alias?: string  } 
  | { name: 'upsertInspection', args?: MutationUpsertInspectionArgs[] | false, alias?: string  } 
  | { name: 'deleteInspection', args?: MutationDeleteInspectionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInspections', args?: MutationDeleteManyInspectionsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createInspection'
  | 'updateInspection'
  | 'updateManyInspections'
  | 'upsertInspection'
  | 'deleteInspection'
  | 'deleteManyInspections'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateInspectionArgs =
  | 'data'
type MutationUpdateInspectionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInspectionsArgs =
  | 'data'
  | 'where'
type MutationUpsertInspectionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInspectionArgs =
  | 'where'
type MutationDeleteManyInspectionsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInspection: {
    type: 'Inspection'
    args: Record<MutationCreateInspectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InspectionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection> | prisma.Inspection
  }
  updateInspection: {
    type: 'Inspection'
    args: Record<MutationUpdateInspectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InspectionUpdateInput, where: InspectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection | null> | prisma.Inspection | null
  }
  updateManyInspections: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInspectionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InspectionUpdateManyMutationInput, where?: InspectionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInspection: {
    type: 'Inspection'
    args: Record<MutationUpsertInspectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InspectionWhereUniqueInput, create: InspectionCreateInput, update: InspectionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection> | prisma.Inspection
  }
  deleteInspection: {
    type: 'Inspection'
    args: Record<MutationDeleteInspectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InspectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection | null> | prisma.Inspection | null
  }
  deleteManyInspections: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInspectionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InspectionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'inspection', args?: SubscriptionInspectionArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'inspection'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionInspectionArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  inspection: {
    type: 'InspectionSubscriptionPayload'
    args: Record<SubscriptionInspectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InspectionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InspectionSubscriptionPayload | null> | prisma.InspectionSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'cc', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'permissions', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'cc'
  | 'email'
  | 'password'
  | 'name'
  | 'permissions'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cc: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  permissions: {
    type: 'Permission'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Permission[]> | prisma.Permission[]
  }
}
  

// Types for InspectionSubscriptionPayload

type InspectionSubscriptionPayloadObject =
  | InspectionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InspectionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InspectionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InspectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Inspection'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InspectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inspection | null> | prisma.Inspection | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InspectionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InspectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InspectionPreviousValues | null> | prisma.InspectionPreviousValues | null
  }
}
  

// Types for InspectionPreviousValues

type InspectionPreviousValuesObject =
  | InspectionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'source', args?: [] | false, alias?: string  } 
  | { name: 'record', args?: [] | false, alias?: string  } 
  | { name: 'licensePlate', args?: [] | false, alias?: string  } 

type InspectionPreviousValuesFields =
  | 'id'
  | 'source'
  | 'record'
  | 'licensePlate'



  

export interface InspectionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  source: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  record: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  licensePlate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  cc?: number | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface InspectionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  source?: string | null
  source_not?: string | null
  source_in?: string[]
  source_not_in?: string[]
  source_lt?: string | null
  source_lte?: string | null
  source_gt?: string | null
  source_gte?: string | null
  source_contains?: string | null
  source_not_contains?: string | null
  source_starts_with?: string | null
  source_not_starts_with?: string | null
  source_ends_with?: string | null
  source_not_ends_with?: string | null
  record?: string | null
  record_not?: string | null
  record_in?: string[]
  record_not_in?: string[]
  record_lt?: string | null
  record_lte?: string | null
  record_gt?: string | null
  record_gte?: string | null
  record_contains?: string | null
  record_not_contains?: string | null
  record_starts_with?: string | null
  record_not_starts_with?: string | null
  record_ends_with?: string | null
  record_not_ends_with?: string | null
  licensePlate?: string | null
  licensePlate_not?: string | null
  licensePlate_in?: string[]
  licensePlate_not_in?: string[]
  licensePlate_lt?: string | null
  licensePlate_lte?: string | null
  licensePlate_gt?: string | null
  licensePlate_gte?: string | null
  licensePlate_contains?: string | null
  licensePlate_not_contains?: string | null
  licensePlate_starts_with?: string | null
  licensePlate_not_starts_with?: string | null
  licensePlate_ends_with?: string | null
  licensePlate_not_ends_with?: string | null
  user?: UserWhereInput | null
  AND?: InspectionWhereInput[]
  OR?: InspectionWhereInput[]
  NOT?: InspectionWhereInput[]
}
export type InspectionWhereInputInputObject =
  | Extract<keyof InspectionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'source_not', alias?: string  } 
  | { name: 'source_in', alias?: string  } 
  | { name: 'source_not_in', alias?: string  } 
  | { name: 'source_lt', alias?: string  } 
  | { name: 'source_lte', alias?: string  } 
  | { name: 'source_gt', alias?: string  } 
  | { name: 'source_gte', alias?: string  } 
  | { name: 'source_contains', alias?: string  } 
  | { name: 'source_not_contains', alias?: string  } 
  | { name: 'source_starts_with', alias?: string  } 
  | { name: 'source_not_starts_with', alias?: string  } 
  | { name: 'source_ends_with', alias?: string  } 
  | { name: 'source_not_ends_with', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'record_not', alias?: string  } 
  | { name: 'record_in', alias?: string  } 
  | { name: 'record_not_in', alias?: string  } 
  | { name: 'record_lt', alias?: string  } 
  | { name: 'record_lte', alias?: string  } 
  | { name: 'record_gt', alias?: string  } 
  | { name: 'record_gte', alias?: string  } 
  | { name: 'record_contains', alias?: string  } 
  | { name: 'record_not_contains', alias?: string  } 
  | { name: 'record_starts_with', alias?: string  } 
  | { name: 'record_not_starts_with', alias?: string  } 
  | { name: 'record_ends_with', alias?: string  } 
  | { name: 'record_not_ends_with', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'licensePlate_not', alias?: string  } 
  | { name: 'licensePlate_in', alias?: string  } 
  | { name: 'licensePlate_not_in', alias?: string  } 
  | { name: 'licensePlate_lt', alias?: string  } 
  | { name: 'licensePlate_lte', alias?: string  } 
  | { name: 'licensePlate_gt', alias?: string  } 
  | { name: 'licensePlate_gte', alias?: string  } 
  | { name: 'licensePlate_contains', alias?: string  } 
  | { name: 'licensePlate_not_contains', alias?: string  } 
  | { name: 'licensePlate_starts_with', alias?: string  } 
  | { name: 'licensePlate_not_starts_with', alias?: string  } 
  | { name: 'licensePlate_ends_with', alias?: string  } 
  | { name: 'licensePlate_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  cc?: number | null
  cc_not?: number | null
  cc_in?: number[]
  cc_not_in?: number[]
  cc_lt?: number | null
  cc_lte?: number | null
  cc_gt?: number | null
  cc_gte?: number | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  inspections_every?: InspectionWhereInput | null
  inspections_some?: InspectionWhereInput | null
  inspections_none?: InspectionWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'cc', alias?: string  } 
  | { name: 'cc_not', alias?: string  } 
  | { name: 'cc_in', alias?: string  } 
  | { name: 'cc_not_in', alias?: string  } 
  | { name: 'cc_lt', alias?: string  } 
  | { name: 'cc_lte', alias?: string  } 
  | { name: 'cc_gt', alias?: string  } 
  | { name: 'cc_gte', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'inspections_every', alias?: string  } 
  | { name: 'inspections_some', alias?: string  } 
  | { name: 'inspections_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InspectionWhereUniqueInput {
  id?: string | null
}
export type InspectionWhereUniqueInputInputObject =
  | Extract<keyof InspectionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  cc?: number
  email?: string
  password?: string
  name?: string | null
  inspections?: InspectionCreateManyWithoutUserInput | null
  permissions?: UserCreatepermissionsInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'inspections', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface InspectionCreateManyWithoutUserInput {
  create?: InspectionCreateWithoutUserInput[]
  connect?: InspectionWhereUniqueInput[]
}
export type InspectionCreateManyWithoutUserInputInputObject =
  | Extract<keyof InspectionCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InspectionCreateWithoutUserInput {
  source?: string
  record?: string
  licensePlate?: string
}
export type InspectionCreateWithoutUserInputInputObject =
  | Extract<keyof InspectionCreateWithoutUserInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  
export interface UserCreatepermissionsInput {
  set?: prisma.Permission[]
}
export type UserCreatepermissionsInputInputObject =
  | Extract<keyof UserCreatepermissionsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpdateInput {
  cc?: number | null
  email?: string | null
  password?: string | null
  name?: string | null
  inspections?: InspectionUpdateManyWithoutUserInput | null
  permissions?: UserUpdatepermissionsInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'inspections', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface InspectionUpdateManyWithoutUserInput {
  create?: InspectionCreateWithoutUserInput[]
  delete?: InspectionWhereUniqueInput[]
  connect?: InspectionWhereUniqueInput[]
  set?: InspectionWhereUniqueInput[]
  disconnect?: InspectionWhereUniqueInput[]
  update?: InspectionUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: InspectionUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: InspectionScalarWhereInput[]
  updateMany?: InspectionUpdateManyWithWhereNestedInput[]
}
export type InspectionUpdateManyWithoutUserInputInputObject =
  | Extract<keyof InspectionUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface InspectionUpdateWithWhereUniqueWithoutUserInput {
  where?: InspectionWhereUniqueInput
  data?: InspectionUpdateWithoutUserDataInput
}
export type InspectionUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof InspectionUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InspectionUpdateWithoutUserDataInput {
  source?: string | null
  record?: string | null
  licensePlate?: string | null
}
export type InspectionUpdateWithoutUserDataInputInputObject =
  | Extract<keyof InspectionUpdateWithoutUserDataInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  
export interface InspectionUpsertWithWhereUniqueWithoutUserInput {
  where?: InspectionWhereUniqueInput
  update?: InspectionUpdateWithoutUserDataInput
  create?: InspectionCreateWithoutUserInput
}
export type InspectionUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof InspectionUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InspectionScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  source?: string | null
  source_not?: string | null
  source_in?: string[]
  source_not_in?: string[]
  source_lt?: string | null
  source_lte?: string | null
  source_gt?: string | null
  source_gte?: string | null
  source_contains?: string | null
  source_not_contains?: string | null
  source_starts_with?: string | null
  source_not_starts_with?: string | null
  source_ends_with?: string | null
  source_not_ends_with?: string | null
  record?: string | null
  record_not?: string | null
  record_in?: string[]
  record_not_in?: string[]
  record_lt?: string | null
  record_lte?: string | null
  record_gt?: string | null
  record_gte?: string | null
  record_contains?: string | null
  record_not_contains?: string | null
  record_starts_with?: string | null
  record_not_starts_with?: string | null
  record_ends_with?: string | null
  record_not_ends_with?: string | null
  licensePlate?: string | null
  licensePlate_not?: string | null
  licensePlate_in?: string[]
  licensePlate_not_in?: string[]
  licensePlate_lt?: string | null
  licensePlate_lte?: string | null
  licensePlate_gt?: string | null
  licensePlate_gte?: string | null
  licensePlate_contains?: string | null
  licensePlate_not_contains?: string | null
  licensePlate_starts_with?: string | null
  licensePlate_not_starts_with?: string | null
  licensePlate_ends_with?: string | null
  licensePlate_not_ends_with?: string | null
  AND?: InspectionScalarWhereInput[]
  OR?: InspectionScalarWhereInput[]
  NOT?: InspectionScalarWhereInput[]
}
export type InspectionScalarWhereInputInputObject =
  | Extract<keyof InspectionScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'source_not', alias?: string  } 
  | { name: 'source_in', alias?: string  } 
  | { name: 'source_not_in', alias?: string  } 
  | { name: 'source_lt', alias?: string  } 
  | { name: 'source_lte', alias?: string  } 
  | { name: 'source_gt', alias?: string  } 
  | { name: 'source_gte', alias?: string  } 
  | { name: 'source_contains', alias?: string  } 
  | { name: 'source_not_contains', alias?: string  } 
  | { name: 'source_starts_with', alias?: string  } 
  | { name: 'source_not_starts_with', alias?: string  } 
  | { name: 'source_ends_with', alias?: string  } 
  | { name: 'source_not_ends_with', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'record_not', alias?: string  } 
  | { name: 'record_in', alias?: string  } 
  | { name: 'record_not_in', alias?: string  } 
  | { name: 'record_lt', alias?: string  } 
  | { name: 'record_lte', alias?: string  } 
  | { name: 'record_gt', alias?: string  } 
  | { name: 'record_gte', alias?: string  } 
  | { name: 'record_contains', alias?: string  } 
  | { name: 'record_not_contains', alias?: string  } 
  | { name: 'record_starts_with', alias?: string  } 
  | { name: 'record_not_starts_with', alias?: string  } 
  | { name: 'record_ends_with', alias?: string  } 
  | { name: 'record_not_ends_with', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'licensePlate_not', alias?: string  } 
  | { name: 'licensePlate_in', alias?: string  } 
  | { name: 'licensePlate_not_in', alias?: string  } 
  | { name: 'licensePlate_lt', alias?: string  } 
  | { name: 'licensePlate_lte', alias?: string  } 
  | { name: 'licensePlate_gt', alias?: string  } 
  | { name: 'licensePlate_gte', alias?: string  } 
  | { name: 'licensePlate_contains', alias?: string  } 
  | { name: 'licensePlate_not_contains', alias?: string  } 
  | { name: 'licensePlate_starts_with', alias?: string  } 
  | { name: 'licensePlate_not_starts_with', alias?: string  } 
  | { name: 'licensePlate_ends_with', alias?: string  } 
  | { name: 'licensePlate_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InspectionUpdateManyWithWhereNestedInput {
  where?: InspectionScalarWhereInput
  data?: InspectionUpdateManyDataInput
}
export type InspectionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof InspectionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InspectionUpdateManyDataInput {
  source?: string | null
  record?: string | null
  licensePlate?: string | null
}
export type InspectionUpdateManyDataInputInputObject =
  | Extract<keyof InspectionUpdateManyDataInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  
export interface UserUpdatepermissionsInput {
  set?: prisma.Permission[]
}
export type UserUpdatepermissionsInputInputObject =
  | Extract<keyof UserUpdatepermissionsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  cc?: number | null
  email?: string | null
  password?: string | null
  name?: string | null
  permissions?: UserUpdatepermissionsInput | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface InspectionCreateInput {
  source?: string
  record?: string
  licensePlate?: string
  user?: UserCreateOneWithoutInspectionsInput
}
export type InspectionCreateInputInputObject =
  | Extract<keyof InspectionCreateInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutInspectionsInput {
  create?: UserCreateWithoutInspectionsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutInspectionsInputInputObject =
  | Extract<keyof UserCreateOneWithoutInspectionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutInspectionsInput {
  cc?: number
  email?: string
  password?: string
  name?: string | null
  permissions?: UserCreatepermissionsInput | null
}
export type UserCreateWithoutInspectionsInputInputObject =
  | Extract<keyof UserCreateWithoutInspectionsInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface InspectionUpdateInput {
  source?: string | null
  record?: string | null
  licensePlate?: string | null
  user?: UserUpdateOneRequiredWithoutInspectionsInput | null
}
export type InspectionUpdateInputInputObject =
  | Extract<keyof InspectionUpdateInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutInspectionsInput {
  create?: UserCreateWithoutInspectionsInput | null
  update?: UserUpdateWithoutInspectionsDataInput | null
  upsert?: UserUpsertWithoutInspectionsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutInspectionsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutInspectionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutInspectionsDataInput {
  cc?: number | null
  email?: string | null
  password?: string | null
  name?: string | null
  permissions?: UserUpdatepermissionsInput | null
}
export type UserUpdateWithoutInspectionsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutInspectionsDataInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface UserUpsertWithoutInspectionsInput {
  update?: UserUpdateWithoutInspectionsDataInput
  create?: UserCreateWithoutInspectionsInput
}
export type UserUpsertWithoutInspectionsInputInputObject =
  | Extract<keyof UserUpsertWithoutInspectionsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InspectionUpdateManyMutationInput {
  source?: string | null
  record?: string | null
  licensePlate?: string | null
}
export type InspectionUpdateManyMutationInputInputObject =
  | Extract<keyof InspectionUpdateManyMutationInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InspectionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InspectionWhereInput | null
  AND?: InspectionSubscriptionWhereInput[]
  OR?: InspectionSubscriptionWhereInput[]
  NOT?: InspectionSubscriptionWhereInput[]
}
export type InspectionSubscriptionWhereInputInputObject =
  | Extract<keyof InspectionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type InspectionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'source_ASC'
  | 'source_DESC'
  | 'record_ASC'
  | 'record_DESC'
  | 'licensePlate_ASC'
  | 'licensePlate_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PermissionValues =
  | 'ADMIN'
  | 'DRIVER'
  | 'AGENT'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'cc_ASC'
  | 'cc_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  
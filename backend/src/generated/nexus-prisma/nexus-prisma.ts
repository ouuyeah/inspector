/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Service: ServiceObject
      Collection: CollectionObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ServiceConnection: ServiceConnectionObject
      ServiceEdge: ServiceEdgeObject
      AggregateService: AggregateServiceObject
      CollectionConnection: CollectionConnectionObject
      CollectionEdge: CollectionEdgeObject
      AggregateCollection: AggregateCollectionObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ServiceSubscriptionPayload: ServiceSubscriptionPayloadObject
      ServicePreviousValues: ServicePreviousValuesObject
      CollectionSubscriptionPayload: CollectionSubscriptionPayloadObject
      CollectionPreviousValues: CollectionPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Service: ServiceFieldDetails
      Collection: CollectionFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ServiceConnection: ServiceConnectionFieldDetails
      ServiceEdge: ServiceEdgeFieldDetails
      AggregateService: AggregateServiceFieldDetails
      CollectionConnection: CollectionConnectionFieldDetails
      CollectionEdge: CollectionEdgeFieldDetails
      AggregateCollection: AggregateCollectionFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ServiceSubscriptionPayload: ServiceSubscriptionPayloadFieldDetails
      ServicePreviousValues: ServicePreviousValuesFieldDetails
      CollectionSubscriptionPayload: CollectionSubscriptionPayloadFieldDetails
      CollectionPreviousValues: CollectionPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      ServiceWhereInput: ServiceWhereInputInputObject
      CollectionWhereInput: CollectionWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      ServiceWhereUniqueInput: ServiceWhereUniqueInputInputObject
      CollectionWhereUniqueInput: CollectionWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      ServiceCreateManyWithoutUserInput: ServiceCreateManyWithoutUserInputInputObject
      ServiceCreateWithoutUserInput: ServiceCreateWithoutUserInputInputObject
      CollectionCreateOneInput: CollectionCreateOneInputInputObject
      CollectionCreateInput: CollectionCreateInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      UserCreatepermissionsInput: UserCreatepermissionsInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      ServiceUpdateManyWithoutUserInput: ServiceUpdateManyWithoutUserInputInputObject
      ServiceUpdateWithWhereUniqueWithoutUserInput: ServiceUpdateWithWhereUniqueWithoutUserInputInputObject
      ServiceUpdateWithoutUserDataInput: ServiceUpdateWithoutUserDataInputInputObject
      CollectionUpdateOneRequiredInput: CollectionUpdateOneRequiredInputInputObject
      CollectionUpdateDataInput: CollectionUpdateDataInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpdatepermissionsInput: UserUpdatepermissionsInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      CollectionUpsertNestedInput: CollectionUpsertNestedInputInputObject
      ServiceUpsertWithWhereUniqueWithoutUserInput: ServiceUpsertWithWhereUniqueWithoutUserInputInputObject
      ServiceScalarWhereInput: ServiceScalarWhereInputInputObject
      ServiceUpdateManyWithWhereNestedInput: ServiceUpdateManyWithWhereNestedInputInputObject
      ServiceUpdateManyDataInput: ServiceUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ServiceCreateInput: ServiceCreateInputInputObject
      UserCreateOneWithoutServicesInput: UserCreateOneWithoutServicesInputInputObject
      UserCreateWithoutServicesInput: UserCreateWithoutServicesInputInputObject
      ServiceUpdateInput: ServiceUpdateInputInputObject
      UserUpdateOneRequiredWithoutServicesInput: UserUpdateOneRequiredWithoutServicesInputInputObject
      UserUpdateWithoutServicesDataInput: UserUpdateWithoutServicesDataInputInputObject
      UserUpsertWithoutServicesInput: UserUpsertWithoutServicesInputInputObject
      ServiceUpdateManyMutationInput: ServiceUpdateManyMutationInputInputObject
      CollectionUpdateInput: CollectionUpdateInputInputObject
      CollectionUpdateManyMutationInput: CollectionUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ServiceSubscriptionWhereInput: ServiceSubscriptionWhereInputInputObject
      CollectionSubscriptionWhereInput: CollectionSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    CollectionType: CollectionTypeValues,
    ServiceState: ServiceStateValues,
    ServiceOrderByInput: ServiceOrderByInputValues,
    Permission: PermissionValues,
    UserOrderByInput: UserOrderByInputValues,
    CollectionOrderByInput: CollectionOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'service', args?: QueryServiceArgs[] | false, alias?: string  } 
  | { name: 'services', args?: QueryServicesArgs[] | false, alias?: string  } 
  | { name: 'servicesConnection', args?: QueryServicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'collection', args?: QueryCollectionArgs[] | false, alias?: string  } 
  | { name: 'collections', args?: QueryCollectionsArgs[] | false, alias?: string  } 
  | { name: 'collectionsConnection', args?: QueryCollectionsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'service'
  | 'services'
  | 'servicesConnection'
  | 'collection'
  | 'collections'
  | 'collectionsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryServiceArgs =
  | 'where'
type QueryServicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryServicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCollectionArgs =
  | 'where'
type QueryCollectionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCollectionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  service: {
    type: 'Service'
    args: Record<QueryServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  services: {
    type: 'Service'
    args: Record<QueryServicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ServiceWhereInput | null, orderBy?: prisma.ServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service[]> | prisma.Service[]
  }
  servicesConnection: {
    type: 'ServiceConnection'
    args: Record<QueryServicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ServiceWhereInput | null, orderBy?: prisma.ServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceConnection> | prisma.ServiceConnection
  }
  collection: {
    type: 'Collection'
    args: Record<QueryCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CollectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  collections: {
    type: 'Collection'
    args: Record<QueryCollectionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionWhereInput | null, orderBy?: prisma.CollectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection[]> | prisma.Collection[]
  }
  collectionsConnection: {
    type: 'CollectionConnection'
    args: Record<QueryCollectionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionWhereInput | null, orderBy?: prisma.CollectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionConnection> | prisma.CollectionConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'cc', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'resetToken', args?: [] | false, alias?: string  } 
  | { name: 'resetTokenExpiry', args?: [] | false, alias?: string  } 
  | { name: 'services', args?: UserServicesArgs[] | false, alias?: string  } 
  | { name: 'permissions', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'cc'
  | 'email'
  | 'nickname'
  | 'password'
  | 'name'
  | 'resetToken'
  | 'resetTokenExpiry'
  | 'services'
  | 'permissions'
  | 'createdAt'
  | 'updatedAt'


type UserServicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resetToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resetTokenExpiry: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  services: {
    type: 'Service'
    args: Record<UserServicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ServiceWhereInput | null, orderBy?: prisma.ServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service[]> | prisma.Service[]
  }
  permissions: {
    type: 'Permission'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Permission[]> | prisma.Permission[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Service

type ServiceObject =
  | ServiceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'source', args?: [] | false, alias?: string  } 
  | { name: 'record', args?: [] | false, alias?: string  } 
  | { name: 'licensePlate', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ServiceFields =
  | 'id'
  | 'source'
  | 'record'
  | 'licensePlate'
  | 'user'
  | 'state'
  | 'createdAt'
  | 'updatedAt'



  

export interface ServiceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  source: {
    type: 'Collection'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Service">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection> | prisma.Collection
  }
  record: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  licensePlate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Service">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  state: {
    type: 'ServiceState'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Service">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceState | null> | prisma.ServiceState | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Collection

type CollectionObject =
  | CollectionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CollectionFields =
  | 'id'
  | 'type'
  | 'name'
  | 'user'
  | 'createdAt'
  | 'updatedAt'



  

export interface CollectionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'CollectionType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Collection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionType> | prisma.CollectionType
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Collection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ServiceConnection

type ServiceConnectionObject =
  | ServiceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ServiceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ServiceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ServiceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceEdge[]> | prisma.ServiceEdge[]
  }
  aggregate: {
    type: 'AggregateService'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateService> | prisma.AggregateService
  }
}
  

// Types for ServiceEdge

type ServiceEdgeObject =
  | ServiceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ServiceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ServiceEdgeFieldDetails {
  node: {
    type: 'Service'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service> | prisma.Service
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateService

type AggregateServiceObject =
  | AggregateServiceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateServiceFields =
  | 'count'



  

export interface AggregateServiceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CollectionConnection

type CollectionConnectionObject =
  | CollectionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CollectionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CollectionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CollectionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionEdge[]> | prisma.CollectionEdge[]
  }
  aggregate: {
    type: 'AggregateCollection'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCollection> | prisma.AggregateCollection
  }
}
  

// Types for CollectionEdge

type CollectionEdgeObject =
  | CollectionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CollectionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CollectionEdgeFieldDetails {
  node: {
    type: 'Collection'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection> | prisma.Collection
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCollection

type AggregateCollectionObject =
  | AggregateCollectionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCollectionFields =
  | 'count'



  

export interface AggregateCollectionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createService', args?: MutationCreateServiceArgs[] | false, alias?: string  } 
  | { name: 'updateService', args?: MutationUpdateServiceArgs[] | false, alias?: string  } 
  | { name: 'updateManyServices', args?: MutationUpdateManyServicesArgs[] | false, alias?: string  } 
  | { name: 'upsertService', args?: MutationUpsertServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteService', args?: MutationDeleteServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyServices', args?: MutationDeleteManyServicesArgs[] | false, alias?: string  } 
  | { name: 'createCollection', args?: MutationCreateCollectionArgs[] | false, alias?: string  } 
  | { name: 'updateCollection', args?: MutationUpdateCollectionArgs[] | false, alias?: string  } 
  | { name: 'updateManyCollections', args?: MutationUpdateManyCollectionsArgs[] | false, alias?: string  } 
  | { name: 'upsertCollection', args?: MutationUpsertCollectionArgs[] | false, alias?: string  } 
  | { name: 'deleteCollection', args?: MutationDeleteCollectionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCollections', args?: MutationDeleteManyCollectionsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createService'
  | 'updateService'
  | 'updateManyServices'
  | 'upsertService'
  | 'deleteService'
  | 'deleteManyServices'
  | 'createCollection'
  | 'updateCollection'
  | 'updateManyCollections'
  | 'upsertCollection'
  | 'deleteCollection'
  | 'deleteManyCollections'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateServiceArgs =
  | 'data'
type MutationUpdateServiceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyServicesArgs =
  | 'data'
  | 'where'
type MutationUpsertServiceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteServiceArgs =
  | 'where'
type MutationDeleteManyServicesArgs =
  | 'where'
type MutationCreateCollectionArgs =
  | 'data'
type MutationUpdateCollectionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCollectionsArgs =
  | 'data'
  | 'where'
type MutationUpsertCollectionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCollectionArgs =
  | 'where'
type MutationDeleteManyCollectionsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createService: {
    type: 'Service'
    args: Record<MutationCreateServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ServiceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service> | prisma.Service
  }
  updateService: {
    type: 'Service'
    args: Record<MutationUpdateServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ServiceUpdateInput, where: ServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  updateManyServices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ServiceUpdateManyMutationInput, where?: ServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertService: {
    type: 'Service'
    args: Record<MutationUpsertServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ServiceWhereUniqueInput, create: ServiceCreateInput, update: ServiceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service> | prisma.Service
  }
  deleteService: {
    type: 'Service'
    args: Record<MutationDeleteServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  deleteManyServices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCollection: {
    type: 'Collection'
    args: Record<MutationCreateCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection> | prisma.Collection
  }
  updateCollection: {
    type: 'Collection'
    args: Record<MutationUpdateCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionUpdateInput, where: CollectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  updateManyCollections: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCollectionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionUpdateManyMutationInput, where?: CollectionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCollection: {
    type: 'Collection'
    args: Record<MutationUpsertCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionWhereUniqueInput, create: CollectionCreateInput, update: CollectionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection> | prisma.Collection
  }
  deleteCollection: {
    type: 'Collection'
    args: Record<MutationDeleteCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  deleteManyCollections: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCollectionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CollectionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'service', args?: SubscriptionServiceArgs[] | false, alias?: string  } 
  | { name: 'collection', args?: SubscriptionCollectionArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'service'
  | 'collection'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionServiceArgs =
  | 'where'
type SubscriptionCollectionArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  service: {
    type: 'ServiceSubscriptionPayload'
    args: Record<SubscriptionServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ServiceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceSubscriptionPayload | null> | prisma.ServiceSubscriptionPayload | null
  }
  collection: {
    type: 'CollectionSubscriptionPayload'
    args: Record<SubscriptionCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CollectionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionSubscriptionPayload | null> | prisma.CollectionSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'cc', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'resetToken', args?: [] | false, alias?: string  } 
  | { name: 'resetTokenExpiry', args?: [] | false, alias?: string  } 
  | { name: 'permissions', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'cc'
  | 'email'
  | 'nickname'
  | 'password'
  | 'name'
  | 'resetToken'
  | 'resetTokenExpiry'
  | 'permissions'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resetToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resetTokenExpiry: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  permissions: {
    type: 'Permission'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Permission[]> | prisma.Permission[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ServiceSubscriptionPayload

type ServiceSubscriptionPayloadObject =
  | ServiceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ServiceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ServiceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Service'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ServicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServicePreviousValues | null> | prisma.ServicePreviousValues | null
  }
}
  

// Types for ServicePreviousValues

type ServicePreviousValuesObject =
  | ServicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'record', args?: [] | false, alias?: string  } 
  | { name: 'licensePlate', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ServicePreviousValuesFields =
  | 'id'
  | 'record'
  | 'licensePlate'
  | 'state'
  | 'createdAt'
  | 'updatedAt'



  

export interface ServicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  record: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  licensePlate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  state: {
    type: 'ServiceState'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ServicePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceState | null> | prisma.ServiceState | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CollectionSubscriptionPayload

type CollectionSubscriptionPayloadObject =
  | CollectionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CollectionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CollectionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Collection'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CollectionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionPreviousValues | null> | prisma.CollectionPreviousValues | null
  }
}
  

// Types for CollectionPreviousValues

type CollectionPreviousValuesObject =
  | CollectionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CollectionPreviousValuesFields =
  | 'id'
  | 'type'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface CollectionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'CollectionType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionType> | prisma.CollectionType
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  cc?: string | null
  email?: string | null
  nickname?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  
export interface ServiceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  source?: CollectionWhereInput | null
  record?: string | null
  record_not?: string | null
  record_in?: string[]
  record_not_in?: string[]
  record_lt?: string | null
  record_lte?: string | null
  record_gt?: string | null
  record_gte?: string | null
  record_contains?: string | null
  record_not_contains?: string | null
  record_starts_with?: string | null
  record_not_starts_with?: string | null
  record_ends_with?: string | null
  record_not_ends_with?: string | null
  licensePlate?: string | null
  licensePlate_not?: string | null
  licensePlate_in?: string[]
  licensePlate_not_in?: string[]
  licensePlate_lt?: string | null
  licensePlate_lte?: string | null
  licensePlate_gt?: string | null
  licensePlate_gte?: string | null
  licensePlate_contains?: string | null
  licensePlate_not_contains?: string | null
  licensePlate_starts_with?: string | null
  licensePlate_not_starts_with?: string | null
  licensePlate_ends_with?: string | null
  licensePlate_not_ends_with?: string | null
  user?: UserWhereInput | null
  state?: prisma.ServiceState | null
  state_not?: prisma.ServiceState | null
  state_in?: prisma.ServiceState[]
  state_not_in?: prisma.ServiceState[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ServiceWhereInput[]
  OR?: ServiceWhereInput[]
  NOT?: ServiceWhereInput[]
}
export type ServiceWhereInputInputObject =
  | Extract<keyof ServiceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'record_not', alias?: string  } 
  | { name: 'record_in', alias?: string  } 
  | { name: 'record_not_in', alias?: string  } 
  | { name: 'record_lt', alias?: string  } 
  | { name: 'record_lte', alias?: string  } 
  | { name: 'record_gt', alias?: string  } 
  | { name: 'record_gte', alias?: string  } 
  | { name: 'record_contains', alias?: string  } 
  | { name: 'record_not_contains', alias?: string  } 
  | { name: 'record_starts_with', alias?: string  } 
  | { name: 'record_not_starts_with', alias?: string  } 
  | { name: 'record_ends_with', alias?: string  } 
  | { name: 'record_not_ends_with', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'licensePlate_not', alias?: string  } 
  | { name: 'licensePlate_in', alias?: string  } 
  | { name: 'licensePlate_not_in', alias?: string  } 
  | { name: 'licensePlate_lt', alias?: string  } 
  | { name: 'licensePlate_lte', alias?: string  } 
  | { name: 'licensePlate_gt', alias?: string  } 
  | { name: 'licensePlate_gte', alias?: string  } 
  | { name: 'licensePlate_contains', alias?: string  } 
  | { name: 'licensePlate_not_contains', alias?: string  } 
  | { name: 'licensePlate_starts_with', alias?: string  } 
  | { name: 'licensePlate_not_starts_with', alias?: string  } 
  | { name: 'licensePlate_ends_with', alias?: string  } 
  | { name: 'licensePlate_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.CollectionType | null
  type_not?: prisma.CollectionType | null
  type_in?: prisma.CollectionType[]
  type_not_in?: prisma.CollectionType[]
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  user?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CollectionWhereInput[]
  OR?: CollectionWhereInput[]
  NOT?: CollectionWhereInput[]
}
export type CollectionWhereInputInputObject =
  | Extract<keyof CollectionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  cc?: string | null
  cc_not?: string | null
  cc_in?: string[]
  cc_not_in?: string[]
  cc_lt?: string | null
  cc_lte?: string | null
  cc_gt?: string | null
  cc_gte?: string | null
  cc_contains?: string | null
  cc_not_contains?: string | null
  cc_starts_with?: string | null
  cc_not_starts_with?: string | null
  cc_ends_with?: string | null
  cc_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  nickname?: string | null
  nickname_not?: string | null
  nickname_in?: string[]
  nickname_not_in?: string[]
  nickname_lt?: string | null
  nickname_lte?: string | null
  nickname_gt?: string | null
  nickname_gte?: string | null
  nickname_contains?: string | null
  nickname_not_contains?: string | null
  nickname_starts_with?: string | null
  nickname_not_starts_with?: string | null
  nickname_ends_with?: string | null
  nickname_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  resetToken?: string | null
  resetToken_not?: string | null
  resetToken_in?: string[]
  resetToken_not_in?: string[]
  resetToken_lt?: string | null
  resetToken_lte?: string | null
  resetToken_gt?: string | null
  resetToken_gte?: string | null
  resetToken_contains?: string | null
  resetToken_not_contains?: string | null
  resetToken_starts_with?: string | null
  resetToken_not_starts_with?: string | null
  resetToken_ends_with?: string | null
  resetToken_not_ends_with?: string | null
  resetTokenExpiry?: number | null
  resetTokenExpiry_not?: number | null
  resetTokenExpiry_in?: number[]
  resetTokenExpiry_not_in?: number[]
  resetTokenExpiry_lt?: number | null
  resetTokenExpiry_lte?: number | null
  resetTokenExpiry_gt?: number | null
  resetTokenExpiry_gte?: number | null
  services_every?: ServiceWhereInput | null
  services_some?: ServiceWhereInput | null
  services_none?: ServiceWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'cc', alias?: string  } 
  | { name: 'cc_not', alias?: string  } 
  | { name: 'cc_in', alias?: string  } 
  | { name: 'cc_not_in', alias?: string  } 
  | { name: 'cc_lt', alias?: string  } 
  | { name: 'cc_lte', alias?: string  } 
  | { name: 'cc_gt', alias?: string  } 
  | { name: 'cc_gte', alias?: string  } 
  | { name: 'cc_contains', alias?: string  } 
  | { name: 'cc_not_contains', alias?: string  } 
  | { name: 'cc_starts_with', alias?: string  } 
  | { name: 'cc_not_starts_with', alias?: string  } 
  | { name: 'cc_ends_with', alias?: string  } 
  | { name: 'cc_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'nickname_not', alias?: string  } 
  | { name: 'nickname_in', alias?: string  } 
  | { name: 'nickname_not_in', alias?: string  } 
  | { name: 'nickname_lt', alias?: string  } 
  | { name: 'nickname_lte', alias?: string  } 
  | { name: 'nickname_gt', alias?: string  } 
  | { name: 'nickname_gte', alias?: string  } 
  | { name: 'nickname_contains', alias?: string  } 
  | { name: 'nickname_not_contains', alias?: string  } 
  | { name: 'nickname_starts_with', alias?: string  } 
  | { name: 'nickname_not_starts_with', alias?: string  } 
  | { name: 'nickname_ends_with', alias?: string  } 
  | { name: 'nickname_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetToken_not', alias?: string  } 
  | { name: 'resetToken_in', alias?: string  } 
  | { name: 'resetToken_not_in', alias?: string  } 
  | { name: 'resetToken_lt', alias?: string  } 
  | { name: 'resetToken_lte', alias?: string  } 
  | { name: 'resetToken_gt', alias?: string  } 
  | { name: 'resetToken_gte', alias?: string  } 
  | { name: 'resetToken_contains', alias?: string  } 
  | { name: 'resetToken_not_contains', alias?: string  } 
  | { name: 'resetToken_starts_with', alias?: string  } 
  | { name: 'resetToken_not_starts_with', alias?: string  } 
  | { name: 'resetToken_ends_with', alias?: string  } 
  | { name: 'resetToken_not_ends_with', alias?: string  } 
  | { name: 'resetTokenExpiry', alias?: string  } 
  | { name: 'resetTokenExpiry_not', alias?: string  } 
  | { name: 'resetTokenExpiry_in', alias?: string  } 
  | { name: 'resetTokenExpiry_not_in', alias?: string  } 
  | { name: 'resetTokenExpiry_lt', alias?: string  } 
  | { name: 'resetTokenExpiry_lte', alias?: string  } 
  | { name: 'resetTokenExpiry_gt', alias?: string  } 
  | { name: 'resetTokenExpiry_gte', alias?: string  } 
  | { name: 'services_every', alias?: string  } 
  | { name: 'services_some', alias?: string  } 
  | { name: 'services_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ServiceWhereUniqueInput {
  id?: string | null
  record?: string | null
}
export type ServiceWhereUniqueInputInputObject =
  | Extract<keyof ServiceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'record', alias?: string  } 
  
export interface CollectionWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type CollectionWhereUniqueInputInputObject =
  | Extract<keyof CollectionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserCreateInput {
  cc?: string
  email?: string
  nickname?: string
  password?: string
  name?: string | null
  resetToken?: string | null
  resetTokenExpiry?: number | null
  services?: ServiceCreateManyWithoutUserInput | null
  permissions?: UserCreatepermissionsInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetTokenExpiry', alias?: string  } 
  | { name: 'services', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface ServiceCreateManyWithoutUserInput {
  create?: ServiceCreateWithoutUserInput[]
  connect?: ServiceWhereUniqueInput[]
}
export type ServiceCreateManyWithoutUserInputInputObject =
  | Extract<keyof ServiceCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ServiceCreateWithoutUserInput {
  source?: CollectionCreateOneInput
  record?: string
  licensePlate?: string
  state?: prisma.ServiceState | null
}
export type ServiceCreateWithoutUserInputInputObject =
  | Extract<keyof ServiceCreateWithoutUserInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface CollectionCreateOneInput {
  create?: CollectionCreateInput | null
  connect?: CollectionWhereUniqueInput | null
}
export type CollectionCreateOneInputInputObject =
  | Extract<keyof CollectionCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CollectionCreateInput {
  type?: prisma.CollectionType
  name?: string
  user?: UserCreateOneInput
}
export type CollectionCreateInputInputObject =
  | Extract<keyof CollectionCreateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreatepermissionsInput {
  set?: prisma.Permission[]
}
export type UserCreatepermissionsInputInputObject =
  | Extract<keyof UserCreatepermissionsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpdateInput {
  cc?: string | null
  email?: string | null
  nickname?: string | null
  password?: string | null
  name?: string | null
  resetToken?: string | null
  resetTokenExpiry?: number | null
  services?: ServiceUpdateManyWithoutUserInput | null
  permissions?: UserUpdatepermissionsInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetTokenExpiry', alias?: string  } 
  | { name: 'services', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface ServiceUpdateManyWithoutUserInput {
  create?: ServiceCreateWithoutUserInput[]
  delete?: ServiceWhereUniqueInput[]
  connect?: ServiceWhereUniqueInput[]
  set?: ServiceWhereUniqueInput[]
  disconnect?: ServiceWhereUniqueInput[]
  update?: ServiceUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: ServiceUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: ServiceScalarWhereInput[]
  updateMany?: ServiceUpdateManyWithWhereNestedInput[]
}
export type ServiceUpdateManyWithoutUserInputInputObject =
  | Extract<keyof ServiceUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ServiceUpdateWithWhereUniqueWithoutUserInput {
  where?: ServiceWhereUniqueInput
  data?: ServiceUpdateWithoutUserDataInput
}
export type ServiceUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof ServiceUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ServiceUpdateWithoutUserDataInput {
  source?: CollectionUpdateOneRequiredInput | null
  record?: string | null
  licensePlate?: string | null
  state?: prisma.ServiceState | null
}
export type ServiceUpdateWithoutUserDataInputInputObject =
  | Extract<keyof ServiceUpdateWithoutUserDataInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface CollectionUpdateOneRequiredInput {
  create?: CollectionCreateInput | null
  update?: CollectionUpdateDataInput | null
  upsert?: CollectionUpsertNestedInput | null
  connect?: CollectionWhereUniqueInput | null
}
export type CollectionUpdateOneRequiredInputInputObject =
  | Extract<keyof CollectionUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CollectionUpdateDataInput {
  type?: prisma.CollectionType | null
  name?: string | null
  user?: UserUpdateOneRequiredInput | null
}
export type CollectionUpdateDataInputInputObject =
  | Extract<keyof CollectionUpdateDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  cc?: string | null
  email?: string | null
  nickname?: string | null
  password?: string | null
  name?: string | null
  resetToken?: string | null
  resetTokenExpiry?: number | null
  services?: ServiceUpdateManyWithoutUserInput | null
  permissions?: UserUpdatepermissionsInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetTokenExpiry', alias?: string  } 
  | { name: 'services', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface UserUpdatepermissionsInput {
  set?: prisma.Permission[]
}
export type UserUpdatepermissionsInputInputObject =
  | Extract<keyof UserUpdatepermissionsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CollectionUpsertNestedInput {
  update?: CollectionUpdateDataInput
  create?: CollectionCreateInput
}
export type CollectionUpsertNestedInputInputObject =
  | Extract<keyof CollectionUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ServiceUpsertWithWhereUniqueWithoutUserInput {
  where?: ServiceWhereUniqueInput
  update?: ServiceUpdateWithoutUserDataInput
  create?: ServiceCreateWithoutUserInput
}
export type ServiceUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof ServiceUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ServiceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  record?: string | null
  record_not?: string | null
  record_in?: string[]
  record_not_in?: string[]
  record_lt?: string | null
  record_lte?: string | null
  record_gt?: string | null
  record_gte?: string | null
  record_contains?: string | null
  record_not_contains?: string | null
  record_starts_with?: string | null
  record_not_starts_with?: string | null
  record_ends_with?: string | null
  record_not_ends_with?: string | null
  licensePlate?: string | null
  licensePlate_not?: string | null
  licensePlate_in?: string[]
  licensePlate_not_in?: string[]
  licensePlate_lt?: string | null
  licensePlate_lte?: string | null
  licensePlate_gt?: string | null
  licensePlate_gte?: string | null
  licensePlate_contains?: string | null
  licensePlate_not_contains?: string | null
  licensePlate_starts_with?: string | null
  licensePlate_not_starts_with?: string | null
  licensePlate_ends_with?: string | null
  licensePlate_not_ends_with?: string | null
  state?: prisma.ServiceState | null
  state_not?: prisma.ServiceState | null
  state_in?: prisma.ServiceState[]
  state_not_in?: prisma.ServiceState[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ServiceScalarWhereInput[]
  OR?: ServiceScalarWhereInput[]
  NOT?: ServiceScalarWhereInput[]
}
export type ServiceScalarWhereInputInputObject =
  | Extract<keyof ServiceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'record_not', alias?: string  } 
  | { name: 'record_in', alias?: string  } 
  | { name: 'record_not_in', alias?: string  } 
  | { name: 'record_lt', alias?: string  } 
  | { name: 'record_lte', alias?: string  } 
  | { name: 'record_gt', alias?: string  } 
  | { name: 'record_gte', alias?: string  } 
  | { name: 'record_contains', alias?: string  } 
  | { name: 'record_not_contains', alias?: string  } 
  | { name: 'record_starts_with', alias?: string  } 
  | { name: 'record_not_starts_with', alias?: string  } 
  | { name: 'record_ends_with', alias?: string  } 
  | { name: 'record_not_ends_with', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'licensePlate_not', alias?: string  } 
  | { name: 'licensePlate_in', alias?: string  } 
  | { name: 'licensePlate_not_in', alias?: string  } 
  | { name: 'licensePlate_lt', alias?: string  } 
  | { name: 'licensePlate_lte', alias?: string  } 
  | { name: 'licensePlate_gt', alias?: string  } 
  | { name: 'licensePlate_gte', alias?: string  } 
  | { name: 'licensePlate_contains', alias?: string  } 
  | { name: 'licensePlate_not_contains', alias?: string  } 
  | { name: 'licensePlate_starts_with', alias?: string  } 
  | { name: 'licensePlate_not_starts_with', alias?: string  } 
  | { name: 'licensePlate_ends_with', alias?: string  } 
  | { name: 'licensePlate_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ServiceUpdateManyWithWhereNestedInput {
  where?: ServiceScalarWhereInput
  data?: ServiceUpdateManyDataInput
}
export type ServiceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ServiceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ServiceUpdateManyDataInput {
  record?: string | null
  licensePlate?: string | null
  state?: prisma.ServiceState | null
}
export type ServiceUpdateManyDataInputInputObject =
  | Extract<keyof ServiceUpdateManyDataInput, string>
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  cc?: string | null
  email?: string | null
  nickname?: string | null
  password?: string | null
  name?: string | null
  resetToken?: string | null
  resetTokenExpiry?: number | null
  permissions?: UserUpdatepermissionsInput | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetTokenExpiry', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface ServiceCreateInput {
  source?: CollectionCreateOneInput
  record?: string
  licensePlate?: string
  user?: UserCreateOneWithoutServicesInput
  state?: prisma.ServiceState | null
}
export type ServiceCreateInputInputObject =
  | Extract<keyof ServiceCreateInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface UserCreateOneWithoutServicesInput {
  create?: UserCreateWithoutServicesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutServicesInputInputObject =
  | Extract<keyof UserCreateOneWithoutServicesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutServicesInput {
  cc?: string
  email?: string
  nickname?: string
  password?: string
  name?: string | null
  resetToken?: string | null
  resetTokenExpiry?: number | null
  permissions?: UserCreatepermissionsInput | null
}
export type UserCreateWithoutServicesInputInputObject =
  | Extract<keyof UserCreateWithoutServicesInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetTokenExpiry', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface ServiceUpdateInput {
  source?: CollectionUpdateOneRequiredInput | null
  record?: string | null
  licensePlate?: string | null
  user?: UserUpdateOneRequiredWithoutServicesInput | null
  state?: prisma.ServiceState | null
}
export type ServiceUpdateInputInputObject =
  | Extract<keyof ServiceUpdateInput, string>
  | { name: 'source', alias?: string  } 
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutServicesInput {
  create?: UserCreateWithoutServicesInput | null
  update?: UserUpdateWithoutServicesDataInput | null
  upsert?: UserUpsertWithoutServicesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutServicesInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutServicesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutServicesDataInput {
  cc?: string | null
  email?: string | null
  nickname?: string | null
  password?: string | null
  name?: string | null
  resetToken?: string | null
  resetTokenExpiry?: number | null
  permissions?: UserUpdatepermissionsInput | null
}
export type UserUpdateWithoutServicesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutServicesDataInput, string>
  | { name: 'cc', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetTokenExpiry', alias?: string  } 
  | { name: 'permissions', alias?: string  } 
  
export interface UserUpsertWithoutServicesInput {
  update?: UserUpdateWithoutServicesDataInput
  create?: UserCreateWithoutServicesInput
}
export type UserUpsertWithoutServicesInputInputObject =
  | Extract<keyof UserUpsertWithoutServicesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ServiceUpdateManyMutationInput {
  record?: string | null
  licensePlate?: string | null
  state?: prisma.ServiceState | null
}
export type ServiceUpdateManyMutationInputInputObject =
  | Extract<keyof ServiceUpdateManyMutationInput, string>
  | { name: 'record', alias?: string  } 
  | { name: 'licensePlate', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface CollectionUpdateInput {
  type?: prisma.CollectionType | null
  name?: string | null
  user?: UserUpdateOneRequiredInput | null
}
export type CollectionUpdateInputInputObject =
  | Extract<keyof CollectionUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface CollectionUpdateManyMutationInput {
  type?: prisma.CollectionType | null
  name?: string | null
}
export type CollectionUpdateManyMutationInputInputObject =
  | Extract<keyof CollectionUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ServiceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ServiceWhereInput | null
  AND?: ServiceSubscriptionWhereInput[]
  OR?: ServiceSubscriptionWhereInput[]
  NOT?: ServiceSubscriptionWhereInput[]
}
export type ServiceSubscriptionWhereInputInputObject =
  | Extract<keyof ServiceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CollectionWhereInput | null
  AND?: CollectionSubscriptionWhereInput[]
  OR?: CollectionSubscriptionWhereInput[]
  NOT?: CollectionSubscriptionWhereInput[]
}
export type CollectionSubscriptionWhereInputInputObject =
  | Extract<keyof CollectionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type CollectionTypeValues =
  | 'SOURCE'
  
export type ServiceStateValues =
  | 'CANCELED'
  | 'FAILED'
  | 'FINALIZED'
  | 'PROCESS'
  
export type ServiceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'record_ASC'
  | 'record_DESC'
  | 'licensePlate_ASC'
  | 'licensePlate_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PermissionValues =
  | 'ADMIN'
  | 'DRIVER'
  | 'AGENT'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'cc_ASC'
  | 'cc_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'nickname_ASC'
  | 'nickname_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'resetToken_ASC'
  | 'resetToken_DESC'
  | 'resetTokenExpiry_ASC'
  | 'resetTokenExpiry_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CollectionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  